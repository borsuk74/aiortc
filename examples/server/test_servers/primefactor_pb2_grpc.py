# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from test_servers import primefactor_pb2 as primefactor__pb2


class FactorsStub(object):
    """Prime factors service definition.
    We have a method called `PrimeFactors` which takes
    parameter called `Request` and returns the message `Response`
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PrimeFactors = channel.stream_stream(
                '/primefactor.Factors/PrimeFactors',
                request_serializer=primefactor__pb2.Request.SerializeToString,
                response_deserializer=primefactor__pb2.Response.FromString,
                )


class FactorsServicer(object):
    """Prime factors service definition.
    We have a method called `PrimeFactors` which takes
    parameter called `Request` and returns the message `Response`
    """

    def PrimeFactors(self, request_iterator, context):
        """The stream keyword is specified before both the request type and response
        type to make it as bidirectional streaming RPC method.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FactorsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PrimeFactors': grpc.stream_stream_rpc_method_handler(
                    servicer.PrimeFactors,
                    request_deserializer=primefactor__pb2.Request.FromString,
                    response_serializer=primefactor__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'primefactor.Factors', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Factors(object):
    """Prime factors service definition.
    We have a method called `PrimeFactors` which takes
    parameter called `Request` and returns the message `Response`
    """

    @staticmethod
    def PrimeFactors(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/primefactor.Factors/PrimeFactors',
            primefactor__pb2.Request.SerializeToString,
            primefactor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
