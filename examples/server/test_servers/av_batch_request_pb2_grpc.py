# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from test_servers import av_batch_request_pb2 as av__batch__request__pb2


class AVBatchServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendAVBatch = channel.stream_stream(
        '/av_batch.AVBatchService/SendAVBatch',
        request_serializer=av__batch__request__pb2.AVBatchRequest.SerializeToString,
        response_deserializer=av__batch__request__pb2.AVBatchResponse.FromString,
        )


class AVBatchServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SendAVBatch(self, request_iterator, context):
    """2 stream API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AVBatchServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendAVBatch': grpc.stream_stream_rpc_method_handler(
          servicer.SendAVBatch,
          request_deserializer=av__batch__request__pb2.AVBatchRequest.FromString,
          response_serializer=av__batch__request__pb2.AVBatchResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'av_batch.AVBatchService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
