# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import speech_response_pb2 as speech__response__pb2


class SpeechBackServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendSpeechStream = channel.stream_stream(
        '/speech_back.SpeechBackService/SendSpeechStream',
        request_serializer=speech__response__pb2.SpeechRequest.SerializeToString,
        response_deserializer=speech__response__pb2.SpeechResponse.FromString,
        )
    self.SendSpeechOne = channel.unary_unary(
        '/speech_back.SpeechBackService/SendSpeechOne',
        request_serializer=speech__response__pb2.SpeechRequest.SerializeToString,
        response_deserializer=speech__response__pb2.SpeechResponse.FromString,
        )


class SpeechBackServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SendSpeechStream(self, request_iterator, context):
    """2 stream API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendSpeechOne(self, request, context):
    """OneCall API
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SpeechBackServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendSpeechStream': grpc.stream_stream_rpc_method_handler(
          servicer.SendSpeechStream,
          request_deserializer=speech__response__pb2.SpeechRequest.FromString,
          response_serializer=speech__response__pb2.SpeechResponse.SerializeToString,
      ),
      'SendSpeechOne': grpc.unary_unary_rpc_method_handler(
          servicer.SendSpeechOne,
          request_deserializer=speech__response__pb2.SpeechRequest.FromString,
          response_serializer=speech__response__pb2.SpeechResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'speech_back.SpeechBackService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
